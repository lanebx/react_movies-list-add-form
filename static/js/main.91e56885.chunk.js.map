{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","regexUrl","NewMovie","state","imdbUrlErr","imgUrlErr","titleErr","descriptionErr","imdbIdErr","handleCHange","event","target","name","value","setState","clearForm","handleSubmit","preventDefault","props","addMovie","validator","search","length","trim","this","onSubmit","required","placeholder","onChange","onBlur","type","disabled","Component","App","moviesFromServer","newMovie","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.91e56885.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","/* eslint-disable no-console */\n/* eslint-disable @typescript-eslint/no-unused-expressions */\n/* eslint-disable max-len */\nimport { Component } from 'react';\n\ntype Props = {\n  addMovie (\n    title: string,\n    description: string,\n    imdbId: string,\n    imdbUrl: string,\n    imgUrl: string,\n  ): void;\n};\n\ntype State = {\n  title?: string,\n  description?: string,\n  imgUrl?: string,\n  imdbUrl?: string,\n  imdbId?: string,\n  imdbUrlErr?: boolean,\n  imgUrlErr?: boolean,\n  titleErr?: boolean,\n  descriptionErr?: boolean,\n  imdbIdErr?: boolean,\n};\n\nconst regexUrl = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\nexport class NewMovie extends Component<Props, State> {\n  state: State = {\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n    imdbUrlErr: false,\n    imgUrlErr: false,\n    titleErr: false,\n    descriptionErr: false,\n    imdbIdErr: false,\n  };\n\n  handleCHange = (\n    event: React.ChangeEvent<HTMLInputElement>\n    | React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value });\n  };\n\n  clearForm = () => {\n    this.setState({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  };\n\n  handleSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const {\n      title,\n      description,\n      imdbId,\n      imdbUrl,\n      imgUrl,\n    } = this.state;\n\n    if (title && description && imdbId && imdbUrl && imgUrl) {\n      this.props.addMovie(title, description, imdbId, imdbUrl, imgUrl);\n    }\n\n    this.clearForm();\n\n    return true;\n  };\n\n  validator = (\n    event: React.ChangeEvent<HTMLInputElement>\n    | React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    if (name === 'imdbUrl' || name === 'imgUrl') {\n      value.search(regexUrl) === 0\n        ? this.setState({ [`${name}Err`]: false })\n        : this.setState({ [`${name}Err`]: true });\n    }\n\n    if (name === 'title' || name === 'description' || name === 'imdbId') {\n      value.length === value.trim().length\n        ? this.setState({ [`${name}Err`]: false })\n        : this.setState({ [`${name}Err`]: true });\n    }\n  };\n\n  render() {\n    const {\n      title,\n      description,\n      imdbId,\n      imdbUrl,\n      imgUrl,\n      imdbUrlErr,\n      imgUrlErr,\n      titleErr,\n      descriptionErr,\n      imdbIdErr,\n    } = this.state;\n\n    return (\n      <form\n        className=\"NewMovie\"\n        onSubmit={this.handleSubmit}\n      >\n        <div>\n          title\n          {titleErr && (\n            <div className=\"error-label\">\n              remove extra spaces\n            </div>\n          )}\n        </div>\n        <input\n          required\n          className={titleErr ? 'input error' : 'input'}\n          name=\"title\"\n          placeholder=\"title\"\n          value={title}\n          onChange={this.handleCHange}\n          onBlur={this.validator}\n        />\n\n        <div>\n          description\n          {descriptionErr && (\n            <div className=\"error-label\">\n              remove extra spaces\n            </div>\n          )}\n        </div>\n        <textarea\n          required\n          name=\"description\"\n          placeholder=\"description\"\n          value={description}\n          onChange={this.handleCHange}\n          className={descriptionErr ? 'input error' : 'input'}\n          onBlur={this.validator}\n        />\n\n        <div>\n          imgUrl\n          {imgUrlErr && (\n            <div className=\"error-label\">\n              Invalid link\n            </div>\n          )}\n        </div>\n        <input\n          required\n          name=\"imgUrl\"\n          placeholder=\"imgUrl\"\n          value={imgUrl}\n          onChange={this.handleCHange}\n          className={imgUrlErr ? 'input error' : 'input'}\n          onBlur={this.validator}\n        />\n\n        <div>\n          imdbUrl\n          {imdbUrlErr && (\n            <div className=\"error-label\">\n              Invalid link\n            </div>\n          )}\n        </div>\n        <input\n          required\n          name=\"imdbUrl\"\n          placeholder=\"imdbUrl\"\n          value={imdbUrl}\n          onChange={this.handleCHange}\n          className={imdbUrlErr ? 'input error' : 'input'}\n          onBlur={this.validator}\n        />\n\n        <div>\n          imdbId\n          {imdbIdErr && (\n            <div className=\"error-label\">\n              remove extra spaces\n            </div>\n          )}\n        </div>\n\n        <input\n          required\n          name=\"imdbId\"\n          placeholder=\"imdbId\"\n          value={imdbId}\n          onChange={this.handleCHange}\n          className={imdbIdErr ? 'input error' : 'input'}\n          onBlur={this.validator}\n        />\n\n        <button\n          type=\"submit\"\n          disabled={imdbUrlErr || imgUrlErr || titleErr || descriptionErr || imdbIdErr}\n          className=\"button\"\n        >\n          Add movie\n        </button>\n      </form>\n    );\n  }\n}\n\n// this.setState((state) => {\n//   return {\n//     title: state.title?.trim(),\n//     description: state.description?.trim(),\n//     imdbId: state.imdbId?.trim(),\n//   };\n// });\n","import React from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\ninterface State {\n  movies: Movie[];\n}\n\nexport class App extends React.Component<{}, State> {\n  state: State = {\n    movies: [...moviesFromServer],\n  };\n\n  addMovie = (\n    title: string,\n    description: string,\n    imgUrl: string,\n    imdbUrl: string,\n    imdbId: string,\n  ) => {\n    const newMovie = {\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    };\n\n    this.setState((state) => {\n      return {\n        movies: [\n          ...state.movies,\n          newMovie,\n        ],\n      };\n    });\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie\n            addMovie={this.addMovie}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}